{"version":3,"sources":["redux/utility.js","redux/reducers/authReducer.js","redux/types.js","redux/store.js","App.js","serviceWorker.js","index.js"],"names":["updateObject","oldObject","updatedProperties","initialState","process","REACT_APP_DB","token","error","loading","isAuthenticated","authStart","state","action","authSuccess","authFail","payload","clearErrors","authLogout","authReducer","type","middleware","thunk","reducers","combineReducers","enhancer","composeWithDevTools","applyMiddleware","store","createStore","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4eAAO,IAAMA,EAAe,SAACC,EAAWC,GACtC,O,yVAAO,CAAP,GACKD,EADL,GAEKC,ICADC,GDqBYC,yDAAYC,aCrBT,CACnBC,MAAO,KACPC,MAAO,KACPC,SAAS,EACTC,iBAAiB,IAGbC,EAAY,SAACC,EAAOC,GACxB,OAAOZ,EAAaW,EAAO,CACzBJ,MAAO,KACPC,SAAS,KAIPK,EAAc,SAACF,EAAOC,GAC1B,OAAOZ,EAAaW,EAAO,CACzBL,MAAOM,EAAON,MACdC,MAAO,KACPC,SAAS,EACTC,iBAAiB,KAIfK,EAAW,SAACH,EAAOC,GACvB,OAAOZ,EAAaW,EAAO,CAEzBJ,MAAOK,EAAOG,QACdP,SAAS,KAIPQ,EAAc,SAACL,EAAOC,GAC1B,OAAOZ,EAAaW,EAAO,CACzBH,SAAS,EACTD,MAAO,QAILU,EAAa,SAACN,EAAOC,GACzB,OAAOZ,EAAaW,EAAOR,IAoBde,EAjBK,WAAmC,IAAlCP,EAAiC,uDAAzBR,EAAcS,EAAW,uCACpD,OAAQA,EAAOO,MACb,IC9CsB,aD+CpB,OAAOT,EAAUC,GACnB,IC/CwB,eDgDtB,OAAOE,EAAYF,EAAOC,GAC5B,IChDqB,YDiDnB,OAAOE,EAASH,EAAOC,GACzB,ICjDuB,cDkDrB,OAAOK,EAAWN,GACpB,IClDwB,eDmDtB,OAAOK,EAAYL,GACrB,QACE,OAAOA,IE3CPS,EAAa,CAACC,KAEdC,EAAWC,0BAAgB,CAC/BL,gBAUIM,EAAWC,8BAAoBC,kBAAe,WAAf,EAAmBN,IAGzCO,EAFDC,sBAAYN,EAhBL,GAgB6BE,G,QChBnCK,MARf,WACE,OACE,kBAAC,IAAD,CAAUF,MAAOA,GACf,8CCIcG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c54c0a68.chunk.js","sourcesContent":["export const updateObject = (oldObject, updatedProperties) => {\n  return {\n    ...oldObject,\n    ...updatedProperties\n  };\n};\n\n// Setup config with token - helper function\nexport const tokenConfig = getState => {\n  // Headers\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  // Get token from state\n  const token = getState().authReducer.token;\n  // If token, add to headers config\n  if (token) {\n    config.headers[\"Authorization\"] = `Bearer ${token}`;\n  }\n  return config;\n};\n\nexport const db = process.env.REACT_APP_DB;\n","import * as actionTypes from \"../types\";\nimport { updateObject } from \"../utility\";\n\nconst initialState = {\n  token: null,\n  error: null,\n  loading: false,\n  isAuthenticated: false,\n};\n\nconst authStart = (state, action) => {\n  return updateObject(state, {\n    error: null,\n    loading: true\n  });\n};\n\nconst authSuccess = (state, action) => {\n  return updateObject(state, {\n    token: action.token,\n    error: null,\n    loading: false,\n    isAuthenticated: true\n  });\n};\n\nconst authFail = (state, action) => {\n  return updateObject(state, {\n    // error: action.error,\n    error: action.payload,\n    loading: false,\n  });\n};\n\nconst clearErrors = (state, action) => {\n  return updateObject(state, {\n    loading: false,\n    error: null\n  });\n};\n\nconst authLogout = (state, action) => {\n  return updateObject(state, initialState);\n};\n\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.AUTH_START:\n      return authStart(state, action);\n    case actionTypes.AUTH_SUCCESS:\n      return authSuccess(state, action);\n    case actionTypes.AUTH_FAIL:\n      return authFail(state, action);\n    case actionTypes.AUTH_LOGOUT:\n      return authLogout(state, action);\n    case actionTypes.CLEAR_ERRORS:\n      return clearErrors(state, action);\n    default:\n      return state;\n  }\n};\n\nexport default authReducer;\n","// User Authentication\nexport const AUTH_START = \"AUTH_START\";\nexport const AUTH_SUCCESS = \"AUTH_SUCCESS\";\nexport const AUTH_FAIL = \"AUTH_FAIL\";\nexport const AUTH_LOGOUT = \"AUTH_LOGOUT\";\nexport const CLEAR_ERRORS = \"CLEAR_ERRORS\";\n","import { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension/developmentOnly\";\nimport thunk from \"redux-thunk\";\n\nimport authReducer from \"./reducers/authReducer\";\n// import iexReducer from \"./reducers/iexReducer\";\n// import userReducer from \"./reducers/userReducer\";\n// import searchReducer from \"./reducers/searchReducer\";\n// import tradeReducer from \"./reducers/tradeReducer\";\n// import fundsReducer from \"./reducers/fundsReducer\";\n// import newsReducer from \"./reducers/newsReducer\";\n// import fmpReducer from \"./reducers/fmpReducer\";\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst reducers = combineReducers({\n  authReducer,\n  // iexReducer,\n  // userReducer,\n  // searchReducer,\n  // tradeReducer,\n  // fundsReducer,\n  // newsReducer,\n  // fmpReducer,\n});\n\nconst enhancer = composeWithDevTools(applyMiddleware(...middleware));\nconst store = createStore(reducers, initialState, enhancer);\n\nexport default store;\n","import React from 'react';\nimport './App.css';\nimport store from \"./redux/store\";\nimport { Provider } from \"react-redux\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div>Hello world</div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}